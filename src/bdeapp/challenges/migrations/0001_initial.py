# Generated by Django 3.2.15 on 2022-09-10 19:46

import bdeapp.utils.storage
import bdeapp.utils.validators
from django.db import migrations, models
import django.db.models.deletion
import functools
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("families", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Challenge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="Unique identifier (UUID4)",
                        verbose_name="Uuid",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=70, unique=True, verbose_name="Name"),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="A short text describing the challenge",
                        max_length=140,
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                ("points", models.PositiveIntegerField(verbose_name="Points")),
            ],
            options={
                "verbose_name": "Challenge",
                "verbose_name_plural": "Challenges",
                "ordering": ["points", "name"],
            },
        ),
        migrations.CreateModel(
            name="Proof",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="Unique identifier (UUID4)",
                        verbose_name="Uuid",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the user doing the challenge",
                        max_length=25,
                        null=True,
                        verbose_name="Name",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PE", "Pending"),
                            ("AP", "Approved"),
                            ("RE", "Rejected"),
                        ],
                        default="PE",
                        max_length=2,
                        verbose_name="Status",
                    ),
                ),
                (
                    "published",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the proof is displayed on the website.",
                        verbose_name="Published",
                    ),
                ),
                (
                    "proof_content",
                    models.FileField(
                        upload_to=functools.partial(
                            bdeapp.utils.storage.uuid_path, *(), **{"suffix": "proofs/"}
                        ),
                        validators=[
                            bdeapp.utils.validators.FileValidator(
                                content_types=["video/*", "image/*"], max_size=104857600
                            )
                        ],
                        verbose_name="Proof content",
                    ),
                ),
                (
                    "challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="challenges.challenge",
                        verbose_name="Challenge",
                    ),
                ),
                (
                    "family",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="families.family",
                        verbose_name="Family",
                    ),
                ),
            ],
            options={
                "verbose_name": "Proof",
                "verbose_name_plural": "Proofs",
            },
        ),
        migrations.CreateModel(
            name="FamilyStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "validations",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of validations",
                        verbose_name="Validations",
                    ),
                ),
                ("enabled", models.BooleanField(default=True, verbose_name="Enabled")),
                (
                    "challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="families_status",
                        to="challenges.challenge",
                        verbose_name="Challenge",
                    ),
                ),
                (
                    "family",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="families.family",
                        verbose_name="Family",
                    ),
                ),
            ],
            options={
                "verbose_name": "Family status",
                "verbose_name_plural": "Families status",
            },
        ),
        migrations.AddConstraint(
            model_name="familystatus",
            constraint=models.UniqueConstraint(
                fields=("family", "challenge"), name="unique_challenge_family"
            ),
        ),
    ]
